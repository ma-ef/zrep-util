#!/bin/bash

# debug option to show all commands
#set -x

DATE_COMMAND=`command -v date`
SCRIPT_NAME=`basename $0`

declare -a VAR_FAILED_POOLS=()
VAR_COUNT_FAIL=0

function headerblock () {
	# Parameters.
  PRINT_CONFIG="$1"
	TEXT_INPUT="$2"
	LINE_COUNT=68

  # Help variables.
  WORD_COUNT=`echo $TEXT_INPUT | wc -m`
  CHAR_AFTER=`expr $LINE_COUNT - $WORD_COUNT - 5`
  LINE_SPACE=`expr $LINE_COUNT - 3`

	# Format placeholder.
	if [ "$CHAR_AFTER" -lt "0" ]; then
		CHAR_AFTER="0"
	fi

	printf -v char '%*s' $CHAR_AFTER ''
	printf -v line '%*s' $LINE_SPACE ''

	log "+${line// /-}+"
	log "| $TEXT_INPUT${char// /.} |"
	log "+${line// /-}+"

  if [ "$PRINT_CONFIG" = true ]; then
    log ""
    log "SCRIPT_NAME.................: $SCRIPT_NAME"
    log ""
    log "CONFIG_FILE.................: $cfg_file"
    log ""
  fi
}

function log() {
        echo $1
        echo `$DATE_COMMAND '+%Y/%m/%d %H:%M:%S'` " INFO:" $1 >>${logfile}
}

function logne() {
        echo -ne $1
        echo -ne `$DATE_COMMAND '+%Y/%m/%d %H:%M:%S'` " INFO:" $1 >>${logfile}
}

function logline () {
	# Parameters.
	TEXT_INPUT="$1"
	TRUE_FALSE="$2"
	LINE_COUNT=68

        # Help variables.
        WORD_COUNT=`echo "$TEXT_INPUT" | wc -m`
        CHAR_AFTER=`expr $LINE_COUNT - $WORD_COUNT - 9`

	# Format placeholder.
	if [ "$CHAR_AFTER" -lt "0" ]; then
		CHAR_AFTER="0"
	fi

	printf -v char '%*s' $CHAR_AFTER ''

	if [ "$TRUE_FALSE" == "true" ]; then
		log "$TEXT_INPUT${char// /.}[  OK  ]"
	else
		log "$TEXT_INPUT${char// /.}[FAILED]"
	fi
}

# generates custom zrep tag based on name of source pool
# example: rpool/var/tmp => zrep_rpool_var_tmp
zreptag() {
  if [ "$use_custom_tag" = true ]; then
    _ZFS_TAG=zrep_$(echo $1 | tr / _ | tr '[:upper:]' '[:lower:]')
    _ZFS_TAG_OPT="ZREPTAG=$_ZFS_TAG"
  else
    _ZFS_TAG="zrep"
    _ZFS_TAG_OPT=""
  fi
}


# initialize routine, takes pool as argument
initializepool() {
  zreptag "$1"
  _SNAP_FIRST=$($_command_src zfs list -H -t snapshot -o name -s creation "$1" | head -n1)
  log "First snapshot on source pool: $_SNAP_FIRST"
  logne "Creating new snapshot on $source..                  "
  $_command_src zfs snap "$1"@"$_ZFS_TAG"_000000 || { log "[FAILED], exiting now"; return 1; } 
  log "[OK]"
  logne "Creating configuration on source $source..          "
  $_command_src "$_ZFS_TAG_OPT" "$source_zrep_command" changeconfig -f $1 "$destination" "$destination_parent_dataset"/"$1" || { log "[FAILED], exiting now"; return 1; }
  # this puts the file test_pipe on 10.242.0.2
  # ssh root@10.242.0.2 ssh root@10.241.0.1 hostname ">" test_pipe
  log "[OK]"
  logne "Sending first snapshot from $source to $destination.. "
  $_command_dst $_command_src zfs send "$_SNAP_FIRST" "| pv |" zfs recv -o "canmount=noauto" -o "readonly=on" -o "encryption=on" -Fu "$destination_parent_dataset"/"$1" || { log "[FAILED], exiting now"; return 1; }
  log "[OK]"
  logne "Sending all intermediate snapshots from $source to $destination.."
  $_command_dst $_command_src zfs send -I "$_SNAP_FIRST" "$1"@"$_ZFS_TAG"_000000 "| pv |" zfs recv -Fu "$destination_parent_dataset"/"$1" || { log "[FAILED], exiting now"; return 1; }
  log "[OK]"
  logne "Creating configuration on destination $destination..   "
  $_command_dst "$_ZFS_TAG_OPT" "$destination_zrep_command" changeconfig -f -d "$destination_parent_dataset"/"$1" "$source" "$1" || { log "[FAILED], exiting now"; return 1; }
  log "[OK]"
  logne "Setting master..                                     "
  $_command_src "$_ZFS_TAG_OPT" "$source_zrep_command" sentsync -L $1@"$_ZFS_TAG"_000000 || { log "[FAILED], exiting now"; return 1; }
  log "[OK]"
  logne "Refresh of zrep backup..                             "
  $_command_dst ZREP_INC_FLAG="-I" "$_ZFS_TAG_OPT" ZREP_PATH="$source_zrep_command" "$destination_zrep_command" refresh "$destination_parent_dataset"/"$1" >/dev/null || { log "[FAILED], exiting now"; return 1; }
  log "[OK]"
  return $?
}

# resync routine, takes pool@snapshot as argument like this
# resyncpool pool@snapshot
resyncpool() {
  src_pool="${1%%@*}"
  dst_pool="$destination_parent_dataset"/"$src_pool"
  snapshot="${1#*@}"
  zreptag "$src_pool"
  # first test whether snaphot given exists on both sides
  $_command_src zfs list -H -t snapshot -o name -s creation "$1" >/dev/null || { log "given snapshot does not exist on src server, exiting now"; return 1; }
  $_command_dst zfs list -H -t snapshot -o name -s creation "$dst_pool"@"$snapshot" || { log "given snapshot does not exist on dst server, exiting now"; return 1; }
  logne "Rolling back to snapshot on destination pool:\n$dst_pool/$snapshot ...     "
  $_command_dst zfs rollback -r "$dst_pool"@"$snapshot" || { log "[FAILED], exiting now"; return 1; } 
  log "[OK]"
  logne "Resetting last synced snapshot on source $source..          "
  $_command_src "$_ZFS_TAG_OPT" "$source_zrep_command" sentsync -L "$src_pool"@"$snapshot" || { log "[FAILED], exiting now"; return 1; }
  log "[OK]"
  logne "Refresh of zrep backup..                             "
  $_command_dst ZREP_INC_FLAG="-I" "$_ZFS_TAG_OPT" ZREP_PATH="$source_zrep_command" "$destination_zrep_command" refresh "$destination_parent_dataset"/"$1" >/dev/null || { log "[FAILED], exiting now"; return 1; }
  log "[OK]"
  return $?
}

# clearing routine, takes pool as argument
clearpool() {
  zreptag "$1"
  logne "Clearing zrep configuration and snapshots on source pool: "
  $_command_src "$_ZFS_TAG_OPT" "$source_zrep_command" clear "$1" >/dev/null || { log "[FAILED], exiting now"; return 1; } 
  # check if destination pool exists
  log "[OK]"
  $_command_dst zfs list "$destination_parent_dataset"/"$1" >/dev/null 2>/dev/null
  if [ $? -eq 0 ]; then
    logne "\e[0;31mWARNING: Destination pool "$destination_parent_dataset"/"$1" exists, please consider destroying it otherwise initialization will fail\e[0m\n"
  fi
  return 0
}

# verifying routine, takes pool as argument
verifypool() {
  # get yesterday, see https://stackoverflow.com/questions/15374752/get-yesterdays-date-in-bash-on-linux-dst-safe
  printf -v tz '%(%z)T' -1
  TZ=$tz printf -v yesterday '%(%Y-%m-%d)T' $(( EPOCHSECONDS - 86400 ))
  $_command_dst zfs list -o name -t snapshot "$destination_parent_dataset"/"$1" | grep "$yesterday" | grep daily || { log "..failed"; return 1; }
  return 0
}

# backup routine, takes pool as argument
backuppool() {
  zreptag "$1"
  $_command_dst ZREP_INC_FLAG="-I" ZREP_SKIP_EXPIRE=1 "$_ZFS_TAG_OPT" ZREP_PATH="$source_zrep_command" "$destination_zrep_command" refresh "$destination_parent_dataset"/"$1"  || { log "[FAILED], exiting now"; return 1; }
  return $?
}

# backup routine, takes pool as argument
expirepool() {
  zreptag "$1"
  if [[ "$2" == "destination" ]]; then
    log "Expiring snapshots on destination pool "$destination_parent_dataset"/"$1"  ...... "
    fail_if_stderr $_command_dst ZREP_INC_FLAG="-I" "$_ZFS_TAG_OPT" ZREP_PATH="$source_zrep_command" "$destination_zrep_command" expire -L "$destination_parent_dataset"/"$1"  || { log "[FAILED], exiting now"; return 1; }
    log "[OK]"
  else
    log "Expiring snapshots on source pool $1  ...... "
    fail_if_stderr $_command_src ZREP_INC_FLAG="-I" "$_ZFS_TAG_OPT" ZREP_PATH="$destination_zrep_command" "$source_zrep_command" expire -L "$1"  || { log "[FAILED], exiting now"; return 1; }
    log "[OK]"
  fi
  return $?
}

timeelapsed() {
 ((h=${1}/3600))
 ((m=(${1}%3600)/60))
 ((s=${1}%60))
 output=$(printf "%02d:%02d:%05.2f" $h $m $s )
 log "Runtime: $output time elapsed"
}

fail_if_stderr() (
  rc=$({
    ("$@" 2>&1 >&3 3>&- 4>&-; echo "$?" >&4) |
    grep '^' >&2 3>&- 4>&-
  } 4>&1)
  err=$?
  [ "$rc" -eq 0 ] || exit "$rc"
  [ "$err" -ne 0 ] || exit 125
) 3>&1

initialize() {
  log ""
  RUN_TIMESTAMP=`$DATE_COMMAND '+%s'`
  headerblock true "Start initilization of pools [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  for pool in "${pools[@]}"
  do
    log "Initializing $pool"
    initializepool "$pool"
    if [ "$?" != "0" ]; then
      log "Initialization of $pool failed"
      ((VAR_COUNT_FAIL++))
      VAR_FAILED_POOLS+=($pool);
    else
      log "Initialization of $pool finished"
    fi
  done
  headerblock false "Runtime statistics "
  log ""
  log "- Total number of pools: ${#pools[@]}"
  log "- thereof failed pools: $VAR_COUNT_FAIL"

  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    log "- list of failed pools: "
    for i in "${VAR_FAILED_POOLS[@]}"
    do
      log "- ... $i"
    done
  fi
  log ""
  END_TIMESTAMP=`$DATE_COMMAND '+%s'`
  timeelapsed $(( $END_TIMESTAMP-$RUN_TIMESTAMP ))
  #log "Runtime: `$DATE_COMMAND -u -d "0 $END_TIMESTAMP seconds - $RUN_TIMESTAMP seconds" +'%H:%M:%S'` time elapsed."
  log ""
  headerblock false "Finished initialization of pools [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  log ""
  # If errors occurred on backups, exit with return code 1 instead of 0.
  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    exit 1
  else
    exit 0
  fi
}

resync() {
  log ""
  RUN_TIMESTAMP=`$DATE_COMMAND '+%s'`
  headerblock true "Start resync to $1 [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  pool="${1%%@*}"
  resyncpool "$1"
  if [ "$?" != "0" ]; then
    log "Resync failed"
    ((VAR_COUNT_FAIL++))
    VAR_FAILED_POOLS+=($pool);
  else
    log "Resync finished"
  fi
  headerblock false "Runtime statistics "
  log ""
  log "- Total number of pools: ${#pools[@]}"
  log "- thereof failed pools: $VAR_COUNT_FAIL"

  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    log "- list of failed pools: "
    for i in "${VAR_FAILED_POOLS[@]}"
    do
      log "- ... $i"
    done
  fi
  log ""
  END_TIMESTAMP=`$DATE_COMMAND '+%s'`
  timeelapsed $(( $END_TIMESTAMP-$RUN_TIMESTAMP ))
  #log "Runtime: `$DATE_COMMAND -u -d "0 $END_TIMESTAMP seconds - $RUN_TIMESTAMP seconds" +'%H:%M:%S'` time elapsed."
  log ""
  headerblock false "Finished resync of $1 [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  log ""
  # If errors occurred on backups, exit with return code 1 instead of 0.
  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    exit 1
  else
    exit 0
  fi
}

clearpools() {
  log ""
  RUN_TIMESTAMP=`$DATE_COMMAND '+%s'`
  headerblock true "Start clearing of pools [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  for pool in "${pools[@]}"
  do
    log "Clearing $pool"
    clearpool "$pool"
    if [ "$?" != "0" ]; then
      log "Clearing of $pool failed"
      ((VAR_COUNT_FAIL++))
      VAR_FAILED_POOLS+=($pool);
    else
      log "Clearing done of $pool"
    fi
  done
  headerblock false "Runtime statistics "
  log ""
  log "- Total number of pools: ${#pools[@]}"
  log "- thereof failed pools: $VAR_COUNT_FAIL"

  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    log "- list of failed pools: "
    for i in "${VAR_FAILED_POOLS[@]}"
    do
      log "- ... $i"
    done
  fi
  log ""
  END_TIMESTAMP=`$DATE_COMMAND '+%s'`
  timeelapsed $(( $END_TIMESTAMP-$RUN_TIMESTAMP ))
  #log "Runtime: `$DATE_COMMAND -u -d "0 $END_TIMESTAMP seconds - $RUN_TIMESTAMP seconds" +'%H:%M:%S'` time elapsed."
  log ""
  headerblock false "Finished clearing of pools [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  log ""
  # If errors occurred on backups, exit with return code 1 instead of 0.
  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    exit 1
  else
    exit 0
  fi
}

backup() {
  log ""
  RUN_TIMESTAMP=`$DATE_COMMAND '+%s'`
  headerblock true "Start backup of pools [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  for pool in "${pools[@]}"
  do
    log "Pulling backup of $pool"
    backuppool "$pool"
    if [ "$?" != "0" ]; then
      log "Backup of $pool failed"
      ((VAR_COUNT_FAIL++))
      VAR_FAILED_POOLS+=($pool);
    else
      log "Backup done of $pool"
    fi
  done
  headerblock false "Runtime statistics "
  log ""
  log "- Total number of pools: ${#pools[@]}"
  log "- thereof failed pools: $VAR_COUNT_FAIL"

  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    log "- ...backup of failed pools: "
    for i in "${VAR_FAILED_POOLS[@]}"
    do
      log "- ... $i"
    done
  fi
  log ""
  END_TIMESTAMP=`$DATE_COMMAND '+%s'`
  timeelapsed $(( $END_TIMESTAMP-$RUN_TIMESTAMP ))
  log ""
  headerblock false "Finished creating the backups [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  log ""
  # If errors occurred on backups, exit with return code 1 instead of 0.
  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    exit 1
  else
    exit 0
  fi
}

expire(){
  log ""
  RUN_TIMESTAMP=`$DATE_COMMAND '+%s'`
  headerblock true "Start expiring old snapshots [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  for pool in "${pools[@]}"
  do
    log "Expiring old snapshots on pool $pool"
    expirepool "$pool" "$1"
    if [ "$?" != "0" ]; then
      log "Failed on $pool"
      ((VAR_COUNT_FAIL++))
      VAR_FAILED_POOLS+=($pool);
    else
      log "Success for $pool"
    fi
  done
  headerblock false "Runtime statistics "
  log ""
  log "- Total number of pools: ${#pools[@]}"
  log "- thereof failed pools: $VAR_COUNT_FAIL"

  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    log "- list of failed pools: "
    for i in "${VAR_FAILED_POOLS[@]}"
    do
      log "- ... $i"
    done
  fi
  log ""
  END_TIMESTAMP=`$DATE_COMMAND '+%s'`
  timeelapsed $(( $END_TIMESTAMP-$RUN_TIMESTAMP ))
  log ""
  headerblock false "Finished expiring old snapshots [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  log ""
  # If errors occurred on backups, exit with return code 1 instead of 0.
  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    exit 1
  else
    exit 0
  fi
}

verify(){
  log ""
  RUN_TIMESTAMP=`$DATE_COMMAND '+%s'`
  headerblock true "Start verifying backups [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  # hack see 
  #YESTERDAY=$(echo -e "$(TZ=GMT+30 date +%Y-%m-%d)\n$(TZ=GMT+20 date +%Y-%m-%d)" | grep -v $(date +%Y-%m-%d) | tail -1)
  printf -v tz '%(%z)T' -1
  TZ=$tz printf -v yesterday '%(%Y-%m-%d)T' $(( EPOCHSECONDS - 86400 ))
  for pool in "${pools[@]}"
  do
    log "Verifying if backup for $pool from $yesterday is present"
    verifypool "$pool"
    if [ "$?" != "0" ]; then
      log "Verification of $pool failed"
      ((VAR_COUNT_FAIL++))
      VAR_FAILED_POOLS+=($pool);
    else
      log "Success for $pool"
    fi
  done
  headerblock false "Runtime statistics "
  log ""
  log "- Total number of pools: ${#pools[@]}"
  log "- thereof failed pools: $VAR_COUNT_FAIL"

  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    log "- list of failed pools: "
    for i in "${VAR_FAILED_POOLS[@]}"
    do
      log "- ... $i"
    done
  fi
  log ""
  END_TIMESTAMP=`$DATE_COMMAND '+%s'`
  timeelapsed $(( $END_TIMESTAMP-$RUN_TIMESTAMP ))
  log ""
  headerblock false "Finished verifying of pools [`$DATE_COMMAND '+%a, %d %b %Y %H:%M:%S (%Z)'`]"
  log ""
  # If errors occurred on backups, exit with return code 1 instead of 0.
  if [ "$VAR_COUNT_FAIL" -gt "0" ]; then
    exit 1
  else
    exit 0
  fi
}


# load and check configuration
# srcconfig [skip]
# skip: optional argument with valid values of src or dst
#       if given, it will skip validation of the src or dst 
srcconfig() {
  if ! [[ -f "$cfg_file" ]]; then 
    echo "error: default config file $cfg_file does not exist"
  fi
  set -o allexport
  source "$cfg_file"
  set +o allexport
  # check pools options
  #[[ -z "$pools" ]] || { echo "error: definition of pools in config file $cfg_file must at least contain one pool"; exit 1; }
  (( ${#pools[@]} != 0 )) || { echo "error: definition of pools in config file $cfg_file must at least contain one pool"; exit 1; }
  # skip src check (for options backup and verify)
  if ! [[ "$1" == "src" ]]; then
    src_user="${source%%@*}"
    src_host="${source#*@}"
    # check login at src 
    if [[ "$src_host" != "localhost" ]]; then
      _command_src="ssh $source"
      $_command_src echo >/dev/null || { echo "error: failed to login on source server as defined in config file $cfg_file"; exit 1; }
    else
      if [[ "$src_user" == $(whoami) ]]; then
        _command_src="eval"
      else
        if [[ $(whoami) == "root" ]]; then
          _command_src="su - $src_user -c"
          $_command_src echo >/dev/null || { echo "error: failed to su to src user $source on localhost as defined in config file $cfg_file"; exit 1; }
        else
          echo "error: must be root to switch to src user $source on localhost as defined in config file $cfg_file"; exit 1;
        fi
      fi
    fi
    # check zrep command on src
    source_zrep_command=${source_zrep_command:-zrep}
    $_command_src "$source_zrep_command" >/dev/null || { echo "error: failed to execute zrep script on source server as defined in config file $cfg_file"; exit 1; }
  fi
  if ! [[ "$1" == "dst" ]]; then
    dst_user="${destination%%@*}"
    dst_host="${destination#*@}"
    # check login backup destination
    if [[ "$dst_host" != "localhost" ]]; then
      _command_dst="ssh $destination"
      $_command_dst echo >/dev/null || { echo "error: failed to login on destination server as defined in config file $cfg_file"; exit 1; }
    else
      if [[ "$dst_user" == $(whoami) ]]; then
        _command_dst="eval"
      else
        if [[ $(whoami) == "root" ]]; then
          _command_dst="su - $dst_user -c"
          $_command_dst echo >/dev/null || { echo "error: failed to su to dst user $destination on localhost as defined in config file $cfg_file"; exit 1; }
        else
          echo "error: must be root to switch to dst user $destination on localhost as defined in config file $cfg_file"; exit 1;
        fi
      fi
    fi
    # check zrep command on dst
    destination_zrep_command=${destination_zrep_command:-zrep}
    $_command_dst "$destination_zrep_command" >/dev/null || { echo "error: failed to execute zrep script on destination server as defined in config file $cfg_file"; exit 1; }
  fi
  # log file
  logfile=${logfile:-/dev/null}
  [[ -f $logfile ]] || touch $logfile
  [[ -w $logfile ]] || { echo "error: failed to login on destination server as defined in config file $cfg_file"; exit 1; }
  use_custom_tag=${use_custom_tag:-false}
  custom_flag_src=${custom_flag_src:-}
  custom_flag_dst=${custom_flag_dst:-}
}

usage() {
  echo "
manage zrep backups of zfs pools 

USAGE: `basename $0` [OPTION] COMMAND [PARAMETER] 

Commands:
  initialize              setup zrep on src and dest with initial replication
  backup                  start pull backup on dest with zrep refresh
  clear                   remove all zrep snapshots and configuration on src
  verify                  verify existence of backups from one day ago on dst
  resync                  roll back to snapshot given as parameter and start sync
  expire                  expire zrep snapshots based on parameter (source or destination)

Options:
  -c [FILE]               config file, default: zrep_utils.cfg

Prior to running initialize it is recommended for non-root users to grant
relevant permissions e.g. by running 
  zfs allow -u <usersend> send,hold,snapshot,userprop <zfspool>
on the source server
  zfs allow -u <userreceive> create,mount,receive,userprop <parentpool>
and by running on the destination server
  "
}

while getopts "c:" opt; do
  case $opt in
    c) cfg_file=$OPTARG
      if ! [[ -f "$cfg_file" ]]; then 
        echo "error in arguments: config file "$cfg_file" does not exist"
        exit 1
      fi
      ;;
    *) echo 'error in command line parsing' >&2
      usage
      exit 1
  esac
done
shift $(($OPTIND - 1))

case "$1" in
  "initialize")
    [ $# -eq 1 ] || { echo "error: wrong number of arguments"; usage; exit 1; }
    srcconfig
    initialize
    ;;
  "backup")
    [ $# -eq 1 ] || { echo "error: wrong number of arguments"; usage; exit 1; }
    srcconfig "src"
    backup
    ;;
  "clear")
    [ $# -eq 1 ] || { echo "error: wrong number of arguments"; usage; exit 1; }
    srcconfig
    clearpools
    ;;
  "verify")
    [ $# -eq 1 ] || { echo "error: wrong number of arguments"; usage; exit 1; }
    srcconfig "src"
    verify
    ;;
  "resync")
    [ $# -eq 2 ] || { echo "error: wrong number of arguments"; usage; exit 1; }
    srcconfig
    resync "$2"
    ;;
  "expire")
    [ $# -eq 2 ] || { echo "error: wrong number of arguments, please use 'source' or 'destination' as second argument"; usage; exit 1; }
    case "$2" in
      "source") srcconfig "dst"; ;;
      "destination") srcconfig "src";  ;;
      *) echo "error: wrong argument, please use 'source' or 'destination' as second argument"; usage; exit 1; ;;
    esac
    expire "$2"
    ;;
  *)
    echo "error: no valid command given"
    usage
esac
